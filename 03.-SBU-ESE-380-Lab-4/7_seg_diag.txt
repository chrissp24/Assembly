; 7_seg_diag.asm: Simple diagnostic program to rule out
;           any hardware problems. The pressing of a push
;           button will turn on all the LEDs of a 7-segment
;           display. The LEDs will remain on until the button
;           is pressed again.
;
; inputs: PBSW1, PC0
; outputs: 7-segment display, 8 LEDs, PB0 to PB7, active low
;
; assumes: nothing
; alters: r16, r17, r19
;
; Author: Paultre/Saied  9/27/14
; Lab Number: 4
; Lab Section: 4
; Lab Bench: 5

;Load include file(s) 
.nolist
.include "m16Adef.inc"          ;include part specific header
.list

reset:
    ;Configure stack pointer
    ldi r19, HIGH (RAMEND)      ;load high byte of last address
    out SPH, r19                ;in SRAM into SPH
    ldi r19, LOW (RAMEND)       ;load low byte of last address
    out SPL, r19                ;in SRAM into SPL
    ;Configure port B as an output port
    ldi r16, $FF                ;load r16 with all 1s
    out DDRB, r16               ;port B - all bits configured as outputs
    out PORTB, r16              ;turn off all the LEDs of the display
    ;Configure bit 0 of port C as an input bit
    cbi DDRC, 0                 ;clear bit 0 of port C setting it up as an input
    sbi PORTC, 0                ;setting bit 0 of port C enabling its associated
                                ;pull-up resistor
                                
delay_1:
    ;Verifying that the switch is released
    sbis PINC, 0                ;skip the next instruction if PINC0 set
    rjmp delay_1                ;restart the delay_1 loop if button is pressed
    rcall delay_10ms            ;wait 10ms to go beyond the bouncing switch
    sbis PINC, 0                ;skip the next instruction if PINC0 set
    rjmp delay_1                ;go back if it was a false press of the button

delay_0:
    ;Waiting for the switch to get pressed
    sbic PINC, 0                ;skip the next instruction if PINC0 clear
    rjmp delay_0                ;restart the delay_0 loop if button not pressed
    rcall delay_10ms            ;wait 10ms to go beyond the bouncing switch
    sbic PINC, 0                ;skip the next instruction if PINC0 clear
    rjmp delay_0                ;restart the delay_0 loop
    com r16                     ;complement r16 to either turn on or turn off
    out PORTB, r16              ;all the LEDs of the display depending on 
                                ;whether the display was on or off
    rjmp delay_1                ;make sure that the switch has been released                            
        
delay_10ms:
    ;Wait 10ms for the switch to be done bouncing
    rcall delay                 ;go to a subroutine wasting 1000 clock cycles
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    rcall delay
    ret
    
delay:
    ;Subroutine wasting a 1003 clock cycles
    ldi r17, $F9                ;load r17 with 249 to count down clock cycles
delay_loop:
    dec r17                     ;decrement r17
    nop                         ;waste a clock cycle
    brne delay_loop             ;restart delay_loop
    ret                         ;return to the delay_10ms loop